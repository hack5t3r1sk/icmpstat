#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import getopt, os, sys, time

try:
    import tabulate
except ImportError:
    print('\n*** ERROR: could not import Tabulate. Please install it and try again ("pip3 install tabulate").\n')
    sys.exit(1)



PLOT_OPT = False
try:
    from icmpPlot import IcmpPlotter
except Exception as e:
    print('\n*** WARNING: importing IcmpPlotter failed, option [p,--plot] is disabled.\n[%s]\n' % e)
    pass
else:
    PLOT_OPT = True

# This is cosmetics, json seems to be part of python3-core anyway
JSON_OPT = False
try:
    import json
except Exception as e:
    print('\n*** WARNING: importing JSON failed, option [-j,--json] is disabled.\nConsider installing it ("pip3 install json") if you need this functionality.\n')
    pass
else:
    JSON_OPT = True

    
try:
    from numpy import arange
except ImportError:
    print('\n*** ERROR: could not import Numpy. Please install it and try again ("pip3 install numpy").\n')
    sys.exit(1)
    
# Import netaddr
try:
    import netaddr
except ImportError:
    print('\n*** ERROR: could not import Netaddr. Please install it and try again ("pip3 install netaddr").\n')
    sys.exit(1)

try:
    from ping import Ping
except Exception as e:
    print(e)
    sys.exit(1)




from threading import Thread

sys.setrecursionlimit(100000)

def resultsToJson(pkts, filepath):
    with open(filepath, 'w') as fp:
        json.dump([p.toDict() for p in pkts], fp)
    
def prepareResults(pkts):
    tabData = [['Alias', 'IP', 'Status', 'Time', 'Sent at']]
    for p in pkts:
        tabData.append([p.hostAlias, 
                        p.hostIp,
                        p.status(), 
                        '%.3f s.' % p.time if not (p.time is None) else p.time, 
                        time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(p.startTime))])
    return tabData
    
def logResults(tabData, logFile):
    with open(logFile,'w') as log:
        log.write('################## PING STATISTICS ####################\n')
        log.write('#### First sent at %s\n#### Last sent at %s ####\n' % (
                time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(pkts[0].startTime)),
                time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(pkts[-1].startTime))
        ))
        log.write(tabulate.tabulate(tabData,headers="firstrow"))
    
def displayResults(tabData):
    #print(tabulate.tabulate([['Alias', 'IP', 'Answered', 'Time'], 
    #           [[p.hostAlias, p.hostIp, p.answered, p.time] for p in pkts]]))
    print('\n\n################## PING STATISTICS ####################')
    print('#### First sent at %s\n#### Last sent at %s ####\n' % (
                time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(pkts[0].startTime)),
                time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(pkts[-1].startTime))
        ))
    print(tabulate.tabulate(tabData,headers="firstrow",numalign='decimal'))

def waitForThreads(threads,pkts=[]):
    # Make sure all threads are done
    print('\n\n*** Waiting for all threads to finish...')
    try:
        # Make sure all pending pings are canceled
        map(lambda p: p.stop(), pkts)
        while len(threads):
            for i,t in enumerate(threads):
                if t.isAlive() is False:
                    threads.pop(i)
                else:
                    t.join()
    except KeyboardInterrupt:
        print('\n\n*** Waiting for all threads to finish, keep CTRL+C pressed to really interrupt...')
        pass

def pingsLoop(hosts, pkts, threads, timeout, interval, count=0, cycleId=0, debug=False):
    global shouldStop
    stopRun = False
    counter = 0
    # Start pinging targets
    print('\nPinging: ', args, ' with timeout=%s' % timeout)
    while not stopRun:
        for host in hosts:
            pingObj = Ping(host, cycleId=cycleId, timeout=timeout, debug=DEBUG)
            pkts.append(pingObj)
            t = Thread(target=pingObj.send, args=())
            threads.append(t)
            try:
                t.start()
            except KeyboardInterrupt:
                stopRun = True
                pass
            except Exception as e:
                EXPT = e
                print('\n### UNHANDLED EXCEPTION:')
                print('# EXCEPTION: %s' % e)
                print('# TRACEBACK:')
                traceback.print_exc(e)
                print('########################\n')
                stopRun = True
            else:
                print('.', end='', flush=True)
            
        print('|', end='', flush=True)

        counter += 1
        cycleId += 1
        try:
            time.sleep(interval)
        except KeyboardInterrupt:
            print("\n*** pingsLoop(): CTRL-C detected, keep pressing to force stop ***")
            shouldStop = True
            stopRun = True
            pass
        if count >0 and counter >= count:
            stopRun = True
            
def createMissingDirs(dirsToCheck):
    for dirPath in dirsToCheck:
        if not os.path.exists(dirPath):
            os.makedirs(dirPath)

def handleResults(pkts,sessionsDir,sessionDir):
    """Called after each pingLoop() to decide what to do with the results"""
    try:        
        # Iterate over cycles
        if len(pkts) >0:
            firstPkt = pkts[0]
            if hasattr(firstPkt, 'startTime'):
                # Define / create dir structure
                logTimestamp   = time.strftime('%Y%m%d-%H%M%S', time.localtime(firstPkt.startTime))
                cycleId        = firstPkt.cycleId
                # TODO: add the cycleId to json/images
                #  BUT: what happens if cycleId == 100 000
                #cycleTimestamp = '%s-%5d' % (logTimestamp, cycleId)
                
                # First call? => define the global sessionDir variable, 
                # which depends on the first packet sent
                if sessionDir is None:
                    if DEBUG:
                        print('handleResults(): sessionDir is None, setting it !')
                    sessionDir   = os.path.join(sessionsDir, logTimestamp)
                sessionImgDir    = os.path.join(sessionDir, imgDir)
                sessionJsonDir   = os.path.join(sessionDir, jsonDir)
            
                if EXPORT_JSON:
                    createMissingDirs([sessionsDir,sessionDir,sessionJsonDir])
                    jsonFile = '%s_%s.json' % (logTimestamp, logSuffix)                    
                    results = resultsToJson(pkts,os.path.join(sessionJsonDir,jsonFile))

                if PLOT_RESULTS:
                    createMissingDirs([sessionsDir,sessionDir,sessionImgDir])
                    plotter = IcmpPlotter([p.toDict() for p in pkts], sessionImgDir, logSuffix)
                    plotter.plot()

                if LOG_RESULTS or DISPLAY_RESULTS:
                    results = prepareResults(pkts)
                    if LOG_RESULTS:
                        createMissingDirs([sessionsDir,sessionDir])
                        logFile = '%s_%s.log' % (logTimestamp, logSuffix)
                        print('\n*** LOGGING RESULTS TO [%s], PLEASE WAIT ... ***' % logFile)
                        try:
                            logResults(results,os.path.join(sessionDir, logFile))
                        except KeyboardInterrupt:
                            pass
        
                    if DISPLAY_RESULTS:
                        try:
                            displayResults(results)
                        except KeyboardInterrupt:
                            pass
                
            else:
                print("handleResults(): First packet has no startTime attribute, please inspect the data...")
        else:
            print("handleResults(): No cycles ! Nothing to do...")
    except KeyboardInterrupt:
        shouldStop = True
        pass
    return sessionDir

def usage(myself):
    print("""
  Usage: %s [-Ddhnp] [-i interval] [-s logSuffix] [-S session-ID] [-t timeOut] ip[:alias] [ip[:alias] ...]

OPTIONS:
 -D, --debug            Enable debug-messages
 -h, --help             This help message
 -l, --no-log           Enable logging of the results
 -p, --plot-results     Draw the graphs to PNG files
 -q, --quiet            Disable displaying of the results
 -j, --json             Enables exporting the results to JSON
 
PARAMETERS:
 -t intOrFloat, --timeout=intOrFloat      Define the timeout for the ICMP packets (default=%s)
 -t range, --timeout=range                Example: '.5:2.5:1' would do three cycles: 0.5, 1.5 and 2.5
 -c int, --count=int                      Define the count (default=%s)
 -i intOrFloat, --interval=intOrFloat     Define the interval between two ICMP packets (default=%s)
 -I string, --session-id =string          Use a user-defined session-ID instead of the generated one
 -S string, --log-suffix=string           Use a user-defined suffix instead of the default one ('%s')
 
Example: draw the graphs to PNG files without logging nor displaying the results
%s -pqc 10 -t .1:3.1:1 192.168.1.1:wlan \\
                             192.168.178.1:fritz \\
                             9.9.9.9:DNS-US \\
                             103.199.156.80:DNS-India-Lalkua

The above example would send:
 - 10 pings with timeout 0.1s
 - 10 pings with timeout 1.1s
 - 10 pings with timeout 2.1s
 - 10 pings with timeout 3.1s
to each of the 4 hosts given as arguments.

""" % (myself, timeout, count, interval, logSuffix, myself))





if __name__ == '__main__':
    # DEFAULT CONFIG
    DEBUG           = False
    DISPLAY_RESULTS = True
    LOG_RESULTS     = False
    PLOT_RESULTS    = False
    EXPORT_JSON     = False
    interval        = 1
    timeout         = 5
    timeoutsRange   = None
    count           = 0
    sessionsDir     = 'icmpSessions'
    sessionDir      = None
    jsonDir         = 'json'
    logSuffix       = 'icmpStat'
    imgDir          = 'images'
    pickleDir       = 'pickle'
    ### Parse command line
    myself = sys.argv[0].split('/')[-1]
    
    try:
        opts, args = getopt.getopt(sys.argv[1:],"dhjlpqc:i:I:S:t:",
                                   ["debug","help","json","log-results","plot","quiet", 
                                    "count=", "interval=","session-id=","log-suffix=","timeout="])
    except getopt.GetoptError:
        usage(myself)
        sys.exit(2)
    
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage(myself)
            sys.exit(0)
        elif opt in ("-d", "--debug"):
            DEBUG = True
        elif opt in ("-j", "--json"):
            if not JSON_OPT:
                print('\n  ====> ERROR: option [-j,--json] is disabled, see WARNING above to know whyand what to do...\n')
                exit(1)
            else:
                EXPORT_JSON = True
        elif opt in ("-l", "--log-results"):
            LOG_RESULTS = True
        elif opt in ("-p", "--plot-only"):
            if not PLOT_OPT:
                print('\n  ====> ERROR: option [-p,--plot] is disabled, see WARNING above to know why and what to do...\n')
                exit(1)
            else:
                PLOT_RESULTS = True
        elif opt in ("-q", "--quiet"):
            DISPLAY_RESULTS = False
        elif opt in ("-c", "--count"):
            count = int(arg)
        elif opt in ("-i", "--interval"):
            interval = float(arg)
        elif opt in ("-I", "--session-id"):
            sessionDir = str(arg)
        elif opt in ("-S", "--log-suffix"):
            logSuffix = str(arg)
        elif opt in ("-t", "--timeout"):
            # Analyse timeout argument
            if ':' in arg:
                timeoutsRange = arg.split(':')
                if len(timeoutsRange) <3:
                    usage(myself)
                    exit(1)
                elif len(timeoutsRange) >3:
                    usage(myself)
                    exit(1)
                try:
                    toutStart = float(timeoutsRange[0])
                    toutStep  = float(timeoutsRange[2])
                    toutStop  = float(timeoutsRange[1]) + toutStep
                    timeoutsList = arange(toutStart, toutStop, toutStep).tolist()
                except:
                    usage(sys.argv[0])
                    exit(1)
                    
            else:
                timeoutsRange = None                
                timeout = float(arg)

    ### LOGIC
    # DEBUG: For keeping track of the last exception
    EXPT = None
    if len(args) <1:
        usage(myself)
        sys.exit(1)
        
    # Build the hosts list from getopt->args
    hosts = []
    for hostDef in args:
        hostTuple = tuple(hostDef.split(':'))
        if len(hostTuple) == 1:
            hostTuple = (hostTuple[0],'')
        hosts.append(hostTuple)
    

    # Init our state
    cycleId  = 0
    pkts    = []
    threads = []
    
    if timeoutsRange is None:
        pingsLoop(hosts, pkts, threads, timeout, interval, count=count, cycleId=cycleId, debug=DEBUG)
        waitForThreads(threads,pkts)
        # Do whatever has to be done with the results
        sessionDir = handleResults(pkts,sessionsDir,sessionDir)
    else:
        if count >0:
            shouldStop = False
            for timeout in timeoutsList:
                if not shouldStop:
                    # Reset our state
                    pkts    = []
                    threads = []
                    try:
                        pingsLoop(hosts, pkts, threads, timeout, interval, count=count, cycleId=cycleId, debug=DEBUG)
                    except KeyboardInterrupt:
                        print('*** Please wait while the programm is shutting down...')
                        shouldStop = True
                        pass
                    waitForThreads(threads,pkts)
                    # Do whatever has to be done with the results
                    sessionDir = handleResults(pkts,sessionsDir,sessionDir)
                    cycleId += 1
        else:
            usage(myself)
            print('====> ERROR: You have to specify a count with (-c,--count=) when using a timeout range.\n')
            exit(1)
